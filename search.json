[{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"multiple-results","dir":"Articles","previous_headings":"","what":"Multiple results","title":"Customise your query","text":"Forward geocoding typically returns multiple results many places similar names. default oc_forward_df() returns one result: one defined best result OpenCage API. receive results, modify limit argument, specifies maximum number results returned. Integer values 1 100 allowed. Reverse geocoding returns one result. Therefore, oc_reverse_df() support limit argument. OpenCage may sometimes one record one place. Duplicated records returned default. set no_dedupe argument TRUE, receive duplicated results available.","code":"oc_forward_df(\"Berlin\") #> # A tibble: 1 × 4 #>   placename oc_lat oc_lng oc_formatted    #>   <chr>      <dbl>  <dbl> <chr>           #> 1 Berlin      52.5   13.4 Berlin, Germany oc_forward_df(\"Berlin\", limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                                #>   <chr>      <dbl>  <dbl> <chr>                                                       #> 1 Berlin      52.5   13.4 Berlin, Germany                                             #> 2 Berlin      44.5  -71.2 Berlin, NH 03570, United States of America                  #> 3 Berlin      52.5   13.4 Berlin Ostbahnhof, Mitteltunnel, 10243 Berlin, Germany      #> 4 Berlin      39.8  -89.9 Berlin, Sangamon County, Illinois, United States of America #> 5 Berlin      41.6  -72.7 Berlin, Connecticut, United States of America oc_forward_df(\"Berlin\", limit = 5, no_dedupe = TRUE) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                                #>   <chr>      <dbl>  <dbl> <chr>                                                       #> 1 Berlin      52.5   13.4 Berlin, Germany                                             #> 2 Berlin      44.5  -71.2 Berlin, NH 03570, United States of America                  #> 3 Berlin      52.5   13.4 Berlin Ostbahnhof, Mitteltunnel, 10243 Berlin, Germany      #> 4 Berlin      39.8  -89.9 Berlin, Sangamon County, Illinois, United States of America #> 5 Berlin      41.6  -72.7 Berlin, Connecticut, United States of America"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"better-targeted-results","dir":"Articles","previous_headings":"","what":"Better targeted results","title":"Customise your query","text":"can see, place names often ambiguous. Happily, OpenCage API tools deal problem. countrycode, bounds, proximity arguments can make query precise. min_confidence lets limit results specified confidence score (necessarily “best” “relevant” result, though). parameters relevant available forward geocoding.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"countrycode","dir":"Articles","previous_headings":"Better targeted results","what":"countrycode","title":"Customise your query","text":"countrycode parameter restricts results given country. country code two letter code defined ISO 3166-1 Alpha 2 standard. E.g. “AR” Argentina, “FR” France, “NZ” New Zealand. Multiple countrycodes per placename must wrapped list. example places called “Paris” Italy Portugal. Despite name, country codes also exist territories independent states, e.g. Gibraltar (“GI”), Greenland (“GL”), Guadaloupe (“GP”), Guam (“GU”). can look specific country codes {ISOcodes} {countrycodes} packages ISO Wikipedia webpages. fact, can also look country codes via OpenCage well. interested country code Curaçao example, run:","code":"oc_forward_df(placename = \"Paris\", countrycode = \"US\", limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                               #>   <chr>      <dbl>  <dbl> <chr>                                      #> 1 Paris       33.7  -95.6 Paris, Texas, United States of America     #> 2 Paris       38.2  -84.3 Paris, KY 40361, United States of America  #> 3 Paris       36.3  -88.3 Paris, Tennessee, United States of America #> 4 Paris       39.6  -87.7 Paris, IL 61944, United States of America  #> 5 Paris       44.3  -70.5 Paris, 04281, United States of America oc_forward_df(placename = \"Paris\", countrycode = list(c(\"IT\", \"PT\")), limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                    #>   <chr>      <dbl>  <dbl> <chr>                                           #> 1 Paris       44.6   7.28 Brossasco, Cuneo, Italy                         #> 2 Paris       46.5  10.4  23030 Valfurva SO, Italy                        #> 3 Paris       37.4  -8.79 8670-320 São Teotónio, Portugal                 #> 4 Paris       43.5  12.1  Paris, 52035 Monterchi AR, Italy                #> 5 Paris       43.8  11.3  Paris, Via dei Banchi, 50123 Florence FI, Italy oc_forward_df(\"Curaçao\", no_annotations = FALSE)[\"oc_iso_3166_1_alpha_2\"] #> # A tibble: 1 × 1 #>   oc_iso_3166_1_alpha_2 #>   <chr>                 #> 1 CW"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"bounds","dir":"Articles","previous_headings":"Better targeted results","what":"bounds","title":"Customise your query","text":"bounds parameter restricts possible results defined bounding box. bounding box named numeric vector four coordinates specifying south-west north-east corners: (xmin, ymin, xmax, ymax). bounds parameter can easily specified oc_bbox() helper. example, bounds = oc_bbox(-0.56, 51.28, 0.27, 51.68). OpenCage provides ‘bounds-finder’ interactively determine bounds values. example use bounds bounding box specifies South American continent. , can also use {opencage} determine bounding box subsequent queries. wanted see many Plaça d’Espanya Balearic Islands, example, find appropriate bounding box search squares: Note OpenCage support point--interest feature search, like “show bus stops area”. interested kind features, might want take look {osmdata} package.","code":"oc_forward_df(placename = \"Paris\", bounds = oc_bbox(-97, -56, -32, 12), limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                                   #>   <chr>      <dbl>  <dbl> <chr>                                                          #> 1 Paris       8.05  -80.6 Paris, Distrito Parita, Panama                                 #> 2 Paris      -6.71  -69.9 Eirunepé, Região Geográfica Intermediária de Tefé, Brazil      #> 3 Paris      -3.99  -79.2 110105, Loja, Ecuador                                          #> 4 Paris     -13.5   -62.5 Canton Motegua, Municipio Baures, Provincia de Iténez, Bolivia #> 5 Paris     -23.5   -47.5 Paris, Jardim Santa Fé, Sorocaba - SP, Brazil hi <- oc_forward_df(placename = \"Balearic Islands\", no_annotations = FALSE)  hi_bbox <-   oc_bbox(     hi$oc_southwest_lng,     hi$oc_southwest_lat,     hi$oc_northeast_lng,     hi$oc_northeast_lat   )  oc_forward_df(placename = \"Plaça d'Espanya\", bounds = hi_bbox, limit = 20) #> # A tibble: 16 × 4 #>    placename       oc_lat oc_lng oc_formatted                                                    #>    <chr>            <dbl>  <dbl> <chr>                                                           #>  1 Plaça d'Espanya   39.6   2.65 Plaça d'Espanya, Carrer d'Eusebi Estada, 07005 Palma, Spain     #>  2 Plaça d'Espanya   39.6   2.65 Plaça d'Espanya, Canavall, Palma, Balearic Islands, Spain       #>  3 Plaça d'Espanya   39.0   1.53 Plaça d'Espanya, Santa Eulària des Riu, Balearic Islands, Spain #>  4 Plaça d'Espanya   39.0   1.30 Plaça d'Espanya, 07820 Sant Antoni de Portmany, Spain           #>  5 Plaça d'Espanya   39.9   4.27 Plaça d'Espanya, Maó, Spain                                     #>  6 Plaça d'Espanya   39.5   3.15 Plaça d'Espanya, 07200 Felanich, Spain                          #>  7 Plaça d'Espanya   39.0   1.53 Plaça d'Espanya, 07840 Santa Eulària des Riu, Spain             #>  8 Plaça d'Espanya   39.6   2.65 Plaça d'Espanya, 07002 Palma, Spain                             #>  9 Plaça d'Espanya   39.9   4.27 Plaça d'Espanya, 07701 Maó, Spain                               #> 10 Plaça d'Espanya   38.9   1.44 Plaça d'Espanya, Ibiza, Spain                                   #> 11 Plaça d'Espanya   39.8   2.72 Plaça d'Espanya, Sóller, Spain                                  #> 12 Plaça d'Espanya   39.7   2.91 Plaça d'Espanya, Inca, Spain                                    #> 13 Plaça d'Espanya   39.6   2.42 plaça d'Espanya, Andratx, Spain                                 #> 14 Plaça d'Espanya   39.6   2.75 Plaça d'Espanya, Marratxí, Spain                                #> 15 Plaça d'Espanya   39.6   2.90 Plaça d'Espanya, 07140 Sencelles, Spain                         #> 16 Plaça d'Espanya   39.8   2.74 Plaça d'Espanya, Fornalutx, Spain"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"proximity","dir":"Articles","previous_headings":"Better targeted results","what":"proximity","title":"Customise your query","text":"proximity parameter provides OpenCage hint bias results favour closer specified location. just one many factors used ranking results, however, () results may far away location point passed proximity parameter. point named numeric vector latitude longitude coordinate pair decimal format. proximity parameter can easily specified oc_points() helper. example, proximity = oc_point(38.0, -84.5), happen already know coordinates. , can also look {opencage}, course: Note French capital listed places US, closer point provided. illustrates proximity one many factors influencing ranking results.","code":"lx <- oc_forward_df(\"Lexington, Kentucky\")  lx_point <- oc_points(lx$oc_lat, lx$oc_lng)  oc_forward_df(placename = \"Paris\", proximity = lx_point, limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                               #>   <chr>      <dbl>  <dbl> <chr>                                                      #> 1 Paris       38.2 -84.3  Paris, KY 40361, United States of America                  #> 2 Paris       48.9   2.32 Paris, Ile-de-France, France                               #> 3 Paris       39.6 -87.7  Paris, IL 61944, United States of America                  #> 4 Paris       38.8 -85.6  Paris, Jennings County, IN 47230, United States of America #> 5 Paris       33.7 -95.6  Paris, Texas, United States of America"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"confidence","dir":"Articles","previous_headings":"Better targeted results","what":"Confidence","title":"Customise your query","text":"min_confidence — integer value 0 10 — indicates precision returned result defined geographical extent, .e. extent result’s bounding box. specify min_confidence, results least requested confidence returned. Thus, following example, French capital large returned. Note confidence used ranking results. tell result “correct” “relevant”, type thing result , rather small result , geographically speaking. See API documentation details.","code":"oc_forward_df(placename = \"Paris\", min_confidence = 7, limit = 5) #> # A tibble: 5 × 4 #>   placename oc_lat oc_lng oc_formatted                                             #>   <chr>      <dbl>  <dbl> <chr>                                                    #> 1 Paris       38.2  -84.3 Paris, KY 40361, United States of America                #> 2 Paris       36.3  -88.3 Paris, Tennessee, United States of America               #> 3 Paris       39.6  -87.7 Paris, IL 61944, United States of America                #> 4 Paris       35.3  -93.7 Paris, Logan County, AR 72855, United States of America  #> 5 Paris       43.0  -75.3 Paris, Oneida County, New York, United States of America"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"retrieve-more-information-from-the-api","dir":"Articles","previous_headings":"","what":"Retrieve more information from the API","title":"Customise your query","text":"Besides parameters target search better, OpenCage offers parameters receive specific types information API.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"language","dir":"Articles","previous_headings":"Retrieve more information from the API","what":"language","title":"Customise your query","text":"like get results specific language, can pass IETF BCP 47 language tag, “tr” Turkish “pt-BR” Brazilian Portuguese, language parameter. OpenCage attempt return results language. Alternatively, can specify “native” tag, case OpenCage attempt return response “official” language(s) location. Keep mind, however, countries one official language official language may one actually used day--day. language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. find correct language tag desired language, can search language BCP47 language subtag lookup example. Note however, language tags use OpenStreetMap, one OpenCage’s main sources, conform IETF BCP 47 standard. example, OSM uses zh_pinyin instead zh-Latn-pinyin Hanyu Pinyin. might, therefore, helpful consult details page target country openstreetmap.org see language tags actually used. case, neither OpenCage API functions package validate language tags provide. details, see OpenCage’s API documentation.","code":"oc_forward_df(placename = \"Munich\", language = \"tr\") #> # A tibble: 1 × 4 #>   placename oc_lat oc_lng oc_formatted            #>   <chr>      <dbl>  <dbl> <chr>                   #> 1 Munich      48.1   11.6 Münih, Bavyera, Almanya oc_forward_df(placename = \"Munich\", language = \"native\") #> # A tibble: 1 × 4 #>   placename oc_lat oc_lng oc_formatted                 #>   <chr>      <dbl>  <dbl> <chr>                        #> 1 Munich      48.1   11.6 München, Bayern, Deutschland oc_forward_df(placename = \"München\") #> # A tibble: 1 × 4 #>   placename oc_lat oc_lng oc_formatted             #>   <chr>      <dbl>  <dbl> <chr>                    #> 1 München     48.1   11.6 Munich, Bavaria, Germany"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"annotations","dir":"Articles","previous_headings":"Retrieve more information from the API","what":"Annotations","title":"Customise your query","text":"OpenCage supplies additional information result location calls annotations. Annotations include, among variety types information, country information, time sunset sunrise, UN M49 codes location different geocoding formats, like Maidenhead, Mercator projection (EPSG:3857), geohash what3words. annotations, like Irish Transverse Mercator (ITM, EPSG:2157) Federal Information Processing Standards (FIPS) code shown appropriate. Whether annotations shown, controlled no_annotations argument. TRUE default, means output contain annotations. (Yes, inverted argument names confusing, just follow OpenCage’s lead .) set no_annotations FALSE, columns returned (.e. output implicitly set \"\"). leads result lot columns.","code":"oc_forward_df(\"Dublin\", no_annotations = FALSE) #> # A tibble: 1 × 70 #>   placen…¹ oc_lat oc_lng oc_co…² oc_fo…³ oc_mgrs oc_ma…⁴ oc_ca…⁵ oc_flag oc_ge…⁶ oc_qi…⁷ oc_wi…⁸ oc_dm…⁹ oc_dm…˟ oc_it…˟ oc_it…˟ #>   <chr>     <dbl>  <dbl>   <int> <chr>   <chr>   <chr>     <int> <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 Dublin     53.3  -6.26       5 Dublin… 29UPV8… IO63ui…     353 \"\\U000… gc7x98…    114. Q1761   53° 20… 6° 15'… 715826… 734697… #> # … with 54 more variables: oc_mercator_x <dbl>, oc_mercator_y <dbl>, oc_osm_edit_url <chr>, oc_osm_note_url <chr>, #> #   oc_osm_url <chr>, oc_un_m49_statistical_groupings <list>, oc_un_m49_regions_europe <chr>, oc_un_m49_regions_ie <chr>, #> #   oc_un_m49_regions_northern_europe <chr>, oc_un_m49_regions_world <chr>, oc_currency_alternate_symbols <list>, #> #   oc_currency_decimal_mark <chr>, oc_currency_html_entity <chr>, oc_currency_iso_code <chr>, oc_currency_iso_numeric <chr>, #> #   oc_currency_name <chr>, oc_currency_smallest_denomination <int>, oc_currency_subunit <chr>, #> #   oc_currency_subunit_to_unit <int>, oc_currency_symbol <chr>, oc_currency_symbol_first <int>, #> #   oc_currency_thousands_separator <chr>, oc_roadinfo_drive_on <chr>, oc_roadinfo_speed_in <chr>, …"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"roadinfo","dir":"Articles","previous_headings":"Retrieve more information from the API","what":"roadinfo","title":"Customise your query","text":"roadinfo indicates whether geocoder attempt match nearest road (rather address) provide additional road driving information. FALSE default, means OpenCage attempt match nearest road. road driving information nevertheless provided part annotations (see ), even roadinfo set FALSE. blog post provides details.","code":"oc_forward_df(placename = c(\"Europa Advance Rd\", \"Bovoni Rd\"), roadinfo = TRUE) #> # A tibble: 2 × 30 #>   placen…¹ oc_lat oc_lng oc_co…² oc_fo…³ oc_ro…⁴ oc_ro…⁵ oc_ro…⁶ oc_ro…⁷ oc_ro…⁸ oc_ro…⁹ oc_no…˟ oc_no…˟ oc_so…˟ oc_so…˟ oc_is…˟ #>   <chr>     <dbl>  <dbl>   <int> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>   #> 1 Europa …   36.1  -5.34       9 Europa… right   yes     Europa… second… km/h    asphalt    36.1   -5.34    36.1   -5.35 GI      #> 2 Bovoni …   18.3 -64.9        8 Bovoni… left    <NA>    Bovoni… primary mph     <NA>       18.3  -64.9     18.3  -64.9  VI      #> # … with 14 more variables: oc_iso_3166_1_alpha_3 <chr>, oc_category <chr>, oc_type <chr>, oc_city <chr>, oc_continent <chr>, #> #   oc_country <chr>, oc_country_code <chr>, oc_postcode <chr>, oc_road <chr>, oc_road_type <chr>, oc_iso_3166_2 <list>, #> #   oc_county <chr>, oc_state <chr>, oc_state_code <chr>, and abbreviated variable names ¹​placename, ²​oc_confidence, #> #   ³​oc_formatted, ⁴​oc_roadinfo_drive_on, ⁵​oc_roadinfo_oneway, ⁶​oc_roadinfo_road, ⁷​oc_roadinfo_road_type, #> #   ⁸​oc_roadinfo_speed_in, ⁹​oc_roadinfo_surface, ˟​oc_northeast_lat, ˟​oc_northeast_lng, ˟​oc_southwest_lat, ˟​oc_southwest_lng, #> #   ˟​oc_iso_3166_1_alpha_2"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"abbreviated-addresses","dir":"Articles","previous_headings":"Retrieve more information from the API","what":"Abbreviated addresses","title":"Customise your query","text":"geocoding functions also abbr parameter, FALSE default. TRUE, addresses formatted field results abbreviated (e.g. “Main St.” instead “Main Street”). See blog post information.","code":"oc_forward_df(\"Wall Street\") #> # A tibble: 1 × 4 #>   placename   oc_lat oc_lng oc_formatted                                              #>   <chr>        <dbl>  <dbl> <chr>                                                     #> 1 Wall Street   40.7  -74.0 Wall Street, New York, NY 10005, United States of America oc_forward_df(\"Wall Street\", abbrv = TRUE) #> # A tibble: 1 × 4 #>   placename   oc_lat oc_lng oc_formatted                     #>   <chr>        <dbl>  <dbl> <chr>                            #> 1 Wall Street   40.7  -74.0 Wall St, New York, NY 10005, USA"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"address_only","dir":"Articles","previous_headings":"Retrieve more information from the API","what":"address_only","title":"Customise your query","text":"address_only set TRUE (default FALSE), OpenCage attempt exclude names points--interests formatted field results. following example, POI “Hôtel de ville de Nantes” (town hall Nantes) removed oc_formatted column address_only = TRUE.","code":"oc_reverse_df(47.21864, -1.55413) #> # A tibble: 1 × 3 #>   latitude longitude oc_formatted                                                              #>      <dbl>     <dbl> <chr>                                                                     #> 1     47.2     -1.55 Hôtel de ville de Nantes, Place de l'Hôtel de Ville, 44000 Nantes, France oc_reverse_df(47.21864, -1.55413, address_only = TRUE) #> # A tibble: 1 × 3 #>   latitude longitude oc_formatted                                    #>      <dbl>     <dbl> <chr>                                           #> 1     47.2     -1.55 Place de l'Hôtel de Ville, 44000 Nantes, France"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"vectorised-arguments","dir":"Articles","previous_headings":"","what":"Vectorised arguments","title":"Customise your query","text":"function arguments mentioned vectorised, can send queries like : geocode place names country codes data frame: also works oc_reverse_df(), course.","code":"oc_forward_df(   placename = c(\"New York\", \"Rio\", \"Tokyo\"),   language = c(\"es\", \"de\", \"fr\") ) #> # A tibble: 3 × 4 #>   placename oc_lat oc_lng oc_formatted                                                      #>   <chr>      <dbl>  <dbl> <chr>                                                             #> 1 New York    40.7  -74.0 Nueva York, Estados Unidos de América                             #> 2 Rio        -22.9  -43.2 Rio de Janeiro, Região Metropolitana do Rio de Janeiro, Brasilien #> 3 Tokyo       35.7  140.  Tokyo, Japon for_df <-   data.frame(     location = c(\"Golden Gate Bridge\", \"Buckingham Palace\", \"Eiffel Tower\"),     ccode = c(\"at\", \"cg\", \"be\")   )  oc_forward_df(for_df, placename = location, countrycode = ccode) #> # A tibble: 3 × 5 #>   location           ccode oc_lat oc_lng oc_formatted                                                                            #>   <chr>              <chr>  <dbl>  <dbl> <chr>                                                                                   #> 1 Golden Gate Bridge at     47.6   15.8  Wiesenbauer, Martin's Golden Gate Bridge, 8684 Gemeinde Spital am Semmering, Austria    #> 2 Buckingham Palace  cg     -4.80  11.8  Buckingham Palace, Boulevard du Général Charles de Gaulle, Pointe-Noire, Congo-Brazzav… #> 3 Eiffel Tower       be     50.9    4.34 Eiffel Tower, Avenue de Bouchout - Boechoutlaan, 1020 Brussels, Belgium rev_df <-   data.frame(     lat = c(51.952659, 41.401372),     lon = c(7.632473, 2.128685)   )  oc_reverse_df(rev_df, lat, lon, language = \"native\") #> # A tibble: 2 × 3 #>     lat   lon oc_formatted                                         #>   <dbl> <dbl> <chr>                                                #> 1  52.0  7.63 Friedrich-Ebert-Straße 7, 48153 Münster, Deutschland #> 2  41.4  2.13 Carrer de Calatrava, 68, 08017 Barcelona, España"},{"path":"https://docs.ropensci.org/opencage/articles/customise_query.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further information","title":"Customise your query","text":"information output query parameters, see OpenCage API docs OpenCage FAQ. building queries, OpenCage’s best practices can useful, well guide geocoding accuracy.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to opencage","text":"can use {opencage} package query OpenCage API need first register OpenCage. Additionally, may want set rate limit (paid OpenCage plan), might want prevent OpenCage storing content queries. words, need setup {opencage}, let’s go process.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"authentication","dir":"Articles","previous_headings":"Setup","what":"Authentication","title":"Introduction to opencage","text":"use package authenticate OpenCage API, need register opencagedata.com/users/sign_up get API key. “Free Trial” plan provides 2,500 API requests day. paid plans available, need run API requests. registered, can generate API key OpenCage dashboard. Now need ensure functions {opencage} can access API key. {opencage} conveniently retrieve API key saved environment variable \"OPENCAGE_KEY\". , oc_config() help set environment variable. pass key directly parameter function. risks exposing API key via script history. three safer ways set API key instead: Save API key environment variable .Renviron described Forgot Teach R Efficient R Programming. fetched functions call OpenCage API. even call oc_config() set key; can start geocoding right away. {usethis} package installed, can edit .Renviron usethis::edit_r_environ(). strongly recommend storing API key user-level .Renviron, opposed project-level. makes less likely share sensitive information mistake. use package like {keyring} store credentials, can safely pass key script function call like oc_config(key = keyring::key_get(\"opencage\")). call oc_config() interactive() session OPENCAGE_KEY environment variable set, prompt enter key console. Whatever method choose, keep API key secret. OpenCage also features best practices keeping API key safe.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"rate-limit","dir":"Articles","previous_headings":"Setup","what":"Rate limit","title":"Introduction to opencage","text":"rate limit used control rate requests sent, legitimate requests lead unintended Denial Service attack. rate limit allowed API depends OpenCage plan ranges 1 request/sec “Free Trial” plan 40 requests/sec “Large” plan. See opencagedata.com/pricing details --date information. “Free Trial” account OpenCage, can skip next section, rate limit already set correctly 1 request/sec. paid account, can set rate limit active R session oc_config(rate_sec = n) n appropriate rate limit. can set rate limit persistently across sessions setting oc_rate_sec option .Rprofile. {usethis} package installed, can edit .Rprofile usethis::edit_r_profile().","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"privacy","dir":"Articles","previous_headings":"Setup","what":"Privacy","title":"Introduction to opencage","text":"default, OpenCage store queries server logs cache forward geocoding requests side. speed response times able debug errors improve service. Logs automatically deleted six months according OpenCage’s page data protection GDPR. concerns privacy want OpenCage record query, .e. place name latitude longitude coordinates want geocode, can set no_record parameter TRUE, tells API log cache queries. OpenCage still records made request, specific queries made. oc_config(no_record = TRUE) sets oc_no_record option active R session, used subsequent OpenCage queries. can set oc_no_record option persistently across sessions .Rprofile. information OpenCage’s policies privacy data protection see Legal section FAQs, GDPR page, , no_record parameter specifically, see relevant blog post. increased privacy, {opencage} sets no_record TRUE, default. Please note, however, {opencage} always caches data receives OpenCage API locally, long R session alive (see ).","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"dont-show-api-key","dir":"Articles","previous_headings":"Setup","what":"(Don’t) show API key","title":"Introduction to opencage","text":"oc_config() another argument, show_key. used debugging explain detail vignette(\"output_options\"). now suffice say OpenCage API key shown {opencage} output, unless change setting.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"altogether-now","dir":"Articles","previous_headings":"Setup","what":"Altogether now","title":"Introduction to opencage","text":"sum, want set API key {keyring}, set rate limit 10 (paid account, please!), want OpenCage records queries, configure {opencage} active session like :","code":"library(\"opencage\") oc_config(   key = keyring::key_get(\"opencage\"),   rate_sec = 10,   no_record = TRUE )"},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"forward-geocoding","dir":"Articles","previous_headings":"","what":"Forward geocoding","title":"Introduction to opencage","text":"Now can start geocode. Forward geocoding location name(s) latitude longitude tuple(s). geocoding functions vectorised, .e. can geocode multiple locations one function call. Note behind scenes requests still sent API one--one. default, oc_forward_df() returns three results columns: oc_lat (latitude), oc_lon (longitude), oc_formatted (formatted address). can see, results columns prefixed oc_. specify oc_forward_df(output = ), receive result columns, often quite extensive. columns receive exactly depends information OpenCage returns specific request. can also pass data frame oc_forward_df(). default results columns added input data frame, useful keeping information associated place names separate columns. want data frame geocoding results, set bind_cols = FALSE. can use piped workflow well.","code":"oc_forward_df(placename = \"Sarzeau\") #> # A tibble: 1 × 4 #>   placename oc_lat oc_lng oc_formatted          #>   <chr>      <dbl>  <dbl> <chr>                 #> 1 Sarzeau     47.5  -2.76 56370 Sarzeau, France opera <- c(\"Palacio de Bellas Artes\", \"Scala\", \"Sydney Opera House\") oc_forward_df(placename = opera) #> # A tibble: 3 × 4 #>   placename               oc_lat oc_lng oc_formatted                                                               #>   <chr>                    <dbl>  <dbl> <chr>                                                                      #> 1 Palacio de Bellas Artes   19.4  -99.1 Palacio de Bellas Artes, Avenida Juárez, Centro Urbano, 06050, CMX, Mexico #> 2 Scala                     40.7   14.6 Scala, Salerno, Italy                                                      #> 3 Sydney Opera House       -33.9  151.  Sydney Opera House, 2 Macquarie Street, Sydney NSW 2000, Australia oc_forward_df(placename = opera, output = \"all\") #> # A tibble: 3 × 31 #>   placename     oc_lat oc_lng oc_co…¹ oc_fo…² oc_no…³ oc_no…⁴ oc_so…⁵ oc_so…⁶ oc_is…⁷ oc_is…⁸ oc_is…⁹ oc_ca…˟ oc_type oc_co…˟ #>   <chr>          <dbl>  <dbl>   <int> <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>   <chr>   <list>  <chr>   <chr>   <chr>   #> 1 Palacio de B…   19.4  -99.1       9 Palaci…    19.4   -99.1    19.4   -99.1 MX      MEX     <chr>   outdoo… museum  North … #> 2 Scala           40.7   14.6       7 Scala,…    40.7    14.6    40.6    14.6 IT      ITA     <chr>   place   city    Europe  #> 3 Sydney Opera…  -33.9  151.        9 Sydney…   -33.9   151.    -33.9   151.  AU      AUS     <chr>   outdoo… arts_c… Oceania #> # … with 16 more variables: oc_country <chr>, oc_country_code <chr>, oc_museum <chr>, oc_neighbourhood <chr>, #> #   oc_postcode <chr>, oc_road <chr>, oc_state <chr>, oc_state_code <chr>, oc_city <chr>, oc_county <chr>, #> #   oc_county_code <chr>, oc_political_union <chr>, oc_arts_centre <chr>, oc_house_number <chr>, oc_municipality <chr>, #> #   oc_suburb <chr>, and abbreviated variable names ¹​oc_confidence, ²​oc_formatted, ³​oc_northeast_lat, ⁴​oc_northeast_lng, #> #   ⁵​oc_southwest_lat, ⁶​oc_southwest_lng, ⁷​oc_iso_3166_1_alpha_2, ⁸​oc_iso_3166_1_alpha_3, ⁹​oc_iso_3166_2, ˟​oc_category, #> #   ˟​oc_continent concert_df <-   data.frame(location = c(\"Elbphilharmonie\", \"Concertgebouw\", \"Suntory Hall\")) oc_forward_df(data = concert_df, placename = location) #> # A tibble: 3 × 4 #>   location        oc_lat oc_lng oc_formatted                                                                  #>   <chr>            <dbl>  <dbl> <chr>                                                                         #> 1 Elbphilharmonie   53.5   9.98 Elbe Philharmonic Hall, Platz der Deutschen Einheit 1, 20457 Hamburg, Germany #> 2 Concertgebouw     52.4   4.88 Concertgebouw, Concertgebouwplein 2, 1071 LN Amsterdam, Netherlands           #> 3 Suntory Hall      35.7 140.   Suntory Hall, Karayan Plaza, Azabu, Minato, 107-6090, Japan library(dplyr, warn.conflicts = FALSE) concert_df %>% oc_forward_df(location) #> # A tibble: 3 × 4 #>   location        oc_lat oc_lng oc_formatted                                                                  #>   <chr>            <dbl>  <dbl> <chr>                                                                         #> 1 Elbphilharmonie   53.5   9.98 Elbe Philharmonic Hall, Platz der Deutschen Einheit 1, 20457 Hamburg, Germany #> 2 Concertgebouw     52.4   4.88 Concertgebouw, Concertgebouwplein 2, 1071 LN Amsterdam, Netherlands           #> 3 Suntory Hall      35.7 140.   Suntory Hall, Karayan Plaza, Azabu, Minato, 107-6090, Japan"},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"reverse-geocoding","dir":"Articles","previous_headings":"","what":"Reverse geocoding","title":"Introduction to opencage","text":"Reverse geocoding works opposite direction forward geocoding: pair coordinates name address appropriate coordinates. Note coordinates sent OpenCage API must adhere WGS 84 (also known EPSG:4326) coordinate reference system decimal format. coordinate reference system used Global Positioning System. usually reason send six seven digits past decimal. precision gets level centimeter. Like oc_forward_df(), oc_reverse_df() vectorised, can work numeric vectors data frames, supports output = \"\" argument can used {magrittr} pipe. OpenCage returns one result per reverse geocoding request.","code":"oc_reverse_df(latitude = 51.5034070, longitude = -0.1275920) #> # A tibble: 1 × 3 #>   latitude longitude oc_formatted                                        #>      <dbl>     <dbl> <chr>                                               #> 1     51.5    -0.128 10 Downing Street, London, SW1A 2AA, United Kingdom"},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"caching","dir":"Articles","previous_headings":"","what":"Caching","title":"Introduction to opencage","text":"OpenCage allows supports caching. minimize number requests sent API {opencage} uses {memoise} cache results inside active R session. clear cache results either start new R session call oc_clear_cache(). probably know, cache invalidation one harder things computer science. Therefore {opencage} supports invalidating whole cache individual records moment. underlying data OpenCage updated daily.","code":"system.time(oc_reverse(latitude = 10, longitude = 10)) #>    user  system elapsed  #>    0.00    0.00    0.96  system.time(oc_reverse(latitude = 10, longitude = 10)) #>    user  system elapsed  #>    0.01    0.00    0.02 oc_clear_cache() #> [1] TRUE  system.time(oc_reverse(latitude = 10, longitude = 10)) #>    user  system elapsed  #>    0.01    0.00    0.91"},{"path":"https://docs.ropensci.org/opencage/articles/opencage.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further information","title":"Introduction to opencage","text":"OpenCage supports lot parameters either target search area specifically specify additional information need. See “Customise query” vignette details. Besides oc_forward_df() oc_reverse_df(), always return single tibble, {opencage} two sibling functions — oc_forward() oc_reverse() — can used return types output. Depending specify return parameter, oc_forward() oc_reverse() return either list tibbles (df_list, default), JSON lists (json_list), GeoJSON lists (geojson_list), URL API called (url_only). Learn “Output options” vignette. Please report issues bugs GitHub repository post questions discuss.ropensci.org.","code":""},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"df_list","dir":"Articles","previous_headings":"","what":"df_list","title":"Output options","text":"default return value df_list. returns list tibbles. df_list type drives oc_forward_df()/oc_reverse_df() functions. can use df_list output dplyr::mutate() chain replicate functionality oc_forward_df(): creates list column oc_result, can easily unnested tidyr::unnest():","code":"stations <- c(\"Casey Station\", \"McMurdo Station\") oc_forward(stations, return = \"df_list\") #> [[1]] #> # A tibble: 2 x 18 #>   oc_confidence oc_formatted oc_northeast_lat oc_northeast_lng oc_southwest_lat oc_southwest_lng oc_category oc_type oc_continent oc_hamlet #>           <int> <chr>                   <dbl>            <dbl>            <dbl>            <dbl> <chr>       <chr>   <chr>        <chr>     #> 1             9 Casey Stati~            -66.3             111.            -66.3             111. commerce    office  Antarctica   Casey St~ #> 2             9 Casey Stati~             NA                NA              NA                NA  travel/tou~ point_~ Antarctica   <NA>      #> # ... with 8 more variables: oc_office <chr>, oc_iso_3166_1_alpha_2 <chr>, oc_iso_3166_1_alpha_3 <chr>, oc_country <chr>, #> #   oc_country_code <chr>, oc_point_of_interest <chr>, oc_lat <dbl>, oc_lng <dbl> #>  #> [[2]] #> # A tibble: 1 x 12 #>   oc_confidence oc_formatted oc_northeast_lat oc_northeast_lng oc_southwest_lat oc_southwest_lng oc_category oc_type oc_continent oc_town #>           <int> <chr>                   <dbl>            <dbl>            <dbl>            <dbl> <chr>       <chr>   <chr>        <chr>   #> 1             7 McMurdo Sta~            -77.8             167.            -77.9             167. place       city    Antarctica   McMurd~ #> # ... with 2 more variables: oc_lat <dbl>, oc_lng <dbl> library(dplyr, warn.conflicts = FALSE)  oc_data <-   tibble(place = stations) %>%   mutate(oc_result = oc_forward(place))  oc_data #> # A tibble: 2 x 2 #>   place           oc_result         #>   <chr>           <list>            #> 1 Casey Station   <tibble [2 x 18]> #> 2 McMurdo Station <tibble [1 x 12]> library(tidyr, warn.conflicts = FALSE)  oc_data %>% unnest(oc_result) #> # A tibble: 3 x 20 #>   place oc_confidence oc_formatted oc_northeast_lat oc_northeast_lng oc_southwest_lat oc_southwest_lng oc_category oc_type oc_continent #>   <chr>         <int> <chr>                   <dbl>            <dbl>            <dbl>            <dbl> <chr>       <chr>   <chr>        #> 1 Case~             9 Casey Stati~            -66.3             111.            -66.3             111. commerce    office  Antarctica   #> 2 Case~             9 Casey Stati~             NA                NA              NA                NA  travel/tou~ point_~ Antarctica   #> 3 McMu~             7 McMurdo Sta~            -77.8             167.            -77.9             167. place       city    Antarctica   #> # ... with 10 more variables: oc_hamlet <chr>, oc_office <chr>, oc_iso_3166_1_alpha_2 <chr>, oc_iso_3166_1_alpha_3 <chr>, #> #   oc_country <chr>, oc_country_code <chr>, oc_point_of_interest <chr>, oc_lat <dbl>, oc_lng <dbl>, oc_town <chr>"},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"json_list","dir":"Articles","previous_headings":"","what":"json_list","title":"Output options","text":"OpenCage’s main output format JSON. specify json_list return type, get JSON R list().","code":"oc_forward(\"Casey Station\", return = \"json_list\") #> [[1]] #> [[1]]$documentation #> [1] \"https://opencagedata.com/api\" #>  #> [[1]]$licenses #> [[1]]$licenses[[1]] #> [[1]]$licenses[[1]]$name #> [1] \"see attribution guide\" #>  #> [[1]]$licenses[[1]]$url #> [1] \"https://opencagedata.com/credits\" #>  #>  #>  #> [[1]]$results #> [[1]]$results[[1]] #> [[1]]$results[[1]]$bounds #> [[1]]$results[[1]]$bounds$northeast #> [[1]]$results[[1]]$bounds$northeast$lat #> [1] -66.28255 #>  #> [[1]]$results[[1]]$bounds$northeast$lng #> [1] 110.5267 #>  #>  #> [[1]]$results[[1]]$bounds$southwest #> [[1]]$results[[1]]$bounds$southwest$lat #> [1] -66.28265 #>  #> [[1]]$results[[1]]$bounds$southwest$lng #> [1] 110.5266 #>  #>  #>  #> [[1]]$results[[1]]$components #> [[1]]$results[[1]]$components$`_category` #> [1] \"commerce\" #>  #> [[1]]$results[[1]]$components$`_type` #> [1] \"office\" #>  #> [[1]]$results[[1]]$components$continent #> [1] \"Antarctica\" #>  #> [[1]]$results[[1]]$components$hamlet #> [1] \"Casey Station\" #>  #> [[1]]$results[[1]]$components$office #> [1] \"Casey Station\" #>  #>  #> [[1]]$results[[1]]$confidence #> [1] 9 #>  #> [[1]]$results[[1]]$formatted #> [1] \"Casey Station\" #>  #> [[1]]$results[[1]]$geometry #> [[1]]$results[[1]]$geometry$lat #> [1] -66.2826 #>  #> [[1]]$results[[1]]$geometry$lng #> [1] 110.5266 #>  #>  #>  #> [[1]]$results[[2]] #> [[1]]$results[[2]]$components #> [[1]]$results[[2]]$components$`ISO_3166-1_alpha-2` #> [1] \"AQ\" #>  #> [[1]]$results[[2]]$components$`ISO_3166-1_alpha-3` #> [1] \"ATA\" #>  #> [[1]]$results[[2]]$components$`_category` #> [1] \"travel/tourism\" #>  #> [[1]]$results[[2]]$components$`_type` #> [1] \"point_of_interest\" #>  #> [[1]]$results[[2]]$components$continent #> [1] \"Antarctica\" #>  #> [[1]]$results[[2]]$components$country #> [1] \"Antarctica\" #>  #> [[1]]$results[[2]]$components$country_code #> [1] \"aq\" #>  #> [[1]]$results[[2]]$components$point_of_interest #> [1] \"Casey Station\" #>  #>  #> [[1]]$results[[2]]$confidence #> [1] 9 #>  #> [[1]]$results[[2]]$formatted #> [1] \"Casey Station, Antarctica\" #>  #> [[1]]$results[[2]]$geometry #> [[1]]$results[[2]]$geometry$lat #> [1] -66.28225 #>  #> [[1]]$results[[2]]$geometry$lng #> [1] 110.5278 #>  #>  #>  #>  #> [[1]]$status #> [[1]]$status$code #> [1] 200 #>  #> [[1]]$status$message #> [1] \"OK\" #>  #>  #> [[1]]$stay_informed #> [[1]]$stay_informed$blog #> [1] \"https://blog.opencagedata.com\" #>  #> [[1]]$stay_informed$twitter #> [1] \"https://twitter.com/OpenCage\" #>  #>  #> [[1]]$thanks #> [1] \"For using an OpenCage API\" #>  #> [[1]]$timestamp #> [[1]]$timestamp$created_http #> [1] \"Thu, 18 Feb 2021 19:02:13 GMT\" #>  #> [[1]]$timestamp$created_unix #> [1] 1613674933 #>  #>  #> [[1]]$total_results #> [1] 2"},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"geojson_list","dir":"Articles","previous_headings":"","what":"geojson_list","title":"Output options","text":"choose geojson_list return type, geocoder response returned GeoJSON specified R list(). fact, {opencage} returns list results geo_list format, compatible {geojsonio} package.","code":"gjsn_lst <- oc_forward(\"Casey Station\", return = \"geojson_list\") gjsn_lst #> [[1]] #> $documentation #> [1] \"https://opencagedata.com/api\" #>  #> $features #> $features[[1]] #> $features[[1]]$geometry #> $features[[1]]$geometry$coordinates #> $features[[1]]$geometry$coordinates[[1]] #> [1] 110.5266 #>  #> $features[[1]]$geometry$coordinates[[2]] #> [1] -66.2826 #>  #>  #> $features[[1]]$geometry$type #> [1] \"Point\" #>  #>  #> $features[[1]]$properties #> $features[[1]]$properties$bounds #> $features[[1]]$properties$bounds$northeast #> $features[[1]]$properties$bounds$northeast$lat #> [1] -66.28255 #>  #> $features[[1]]$properties$bounds$northeast$lng #> [1] 110.5267 #>  #>  #> $features[[1]]$properties$bounds$southwest #> $features[[1]]$properties$bounds$southwest$lat #> [1] -66.28265 #>  #> $features[[1]]$properties$bounds$southwest$lng #> [1] 110.5266 #>  #>  #>  #> $features[[1]]$properties$components #> $features[[1]]$properties$components$`_category` #> [1] \"commerce\" #>  #> $features[[1]]$properties$components$`_type` #> [1] \"office\" #>  #> $features[[1]]$properties$components$continent #> [1] \"Antarctica\" #>  #> $features[[1]]$properties$components$hamlet #> [1] \"Casey Station\" #>  #> $features[[1]]$properties$components$office #> [1] \"Casey Station\" #>  #>  #> $features[[1]]$properties$confidence #> [1] 9 #>  #> $features[[1]]$properties$formatted #> [1] \"Casey Station\" #>  #>  #> $features[[1]]$type #> [1] \"Feature\" #>  #>  #> $features[[2]] #> $features[[2]]$geometry #> $features[[2]]$geometry$coordinates #> $features[[2]]$geometry$coordinates[[1]] #> [1] 110.5278 #>  #> $features[[2]]$geometry$coordinates[[2]] #> [1] -66.28225 #>  #>  #> $features[[2]]$geometry$type #> [1] \"Point\" #>  #>  #> $features[[2]]$properties #> $features[[2]]$properties$components #> $features[[2]]$properties$components$`ISO_3166-1_alpha-2` #> [1] \"AQ\" #>  #> $features[[2]]$properties$components$`ISO_3166-1_alpha-3` #> [1] \"ATA\" #>  #> $features[[2]]$properties$components$`_category` #> [1] \"travel/tourism\" #>  #> $features[[2]]$properties$components$`_type` #> [1] \"point_of_interest\" #>  #> $features[[2]]$properties$components$continent #> [1] \"Antarctica\" #>  #> $features[[2]]$properties$components$country #> [1] \"Antarctica\" #>  #> $features[[2]]$properties$components$country_code #> [1] \"aq\" #>  #> $features[[2]]$properties$components$point_of_interest #> [1] \"Casey Station\" #>  #>  #> $features[[2]]$properties$confidence #> [1] 9 #>  #> $features[[2]]$properties$formatted #> [1] \"Casey Station, Antarctica\" #>  #>  #> $features[[2]]$type #> [1] \"Feature\" #>  #>  #>  #> $licenses #> $licenses[[1]] #> $licenses[[1]]$name #> [1] \"see attribution guide\" #>  #> $licenses[[1]]$url #> [1] \"https://opencagedata.com/credits\" #>  #>  #>  #> $rate #> named list() #>  #> $status #> $status$code #> [1] 200 #>  #> $status$message #> [1] \"OK\" #>  #>  #> $stay_informed #> $stay_informed$blog #> [1] \"https://blog.opencagedata.com\" #>  #> $stay_informed$twitter #> [1] \"https://twitter.com/OpenCage\" #>  #>  #> $thanks #> [1] \"For using an OpenCage API\" #>  #> $timestamp #> $timestamp$created_http #> [1] \"Thu, 18 Feb 2021 19:02:15 GMT\" #>  #> $timestamp$created_unix #> [1] 1613674935 #>  #>  #> $total_results #> [1] 2 #>  #> $type #> [1] \"FeatureCollection\" #>  #> attr(,\"class\") #> [1] \"geo_list\" class(gjsn_lst[[1]]) #> [1] \"geo_list\""},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"url_only","dir":"Articles","previous_headings":"","what":"url_only","title":"Output options","text":"url_only returns OpenCage URL debugging purposes. OpenCage API key masked OPENCAGE_KEY string, default. really want {opencage} display API key URL, set show_key argument oc_config() TRUE. Note API key returned URL base::interactive() mode.","code":"oc_forward(\"Casey Station\", return = \"url_only\") #> [[1]] #> [1] \"https://api.opencagedata.com/geocode/v1/json?q=Casey%20Station&limit=10&no_annotations=1&roadinfo=0&no_dedupe=0&no_record=1&abbrv=0&add_request=0&key=OPENCAGE_KEY\" oc_config(show_key = TRUE)"},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"xml","dir":"Articles","previous_headings":"","what":"xml","title":"Output options","text":"{opencage} support XML response type moment. Please file issue pull-request use-case requires .","code":""},{"path":"https://docs.ropensci.org/opencage/articles/output_options.html","id":"return-query-text","dir":"Articles","previous_headings":"","what":"Return query text","title":"Output options","text":"oc_forward() oc_reverse() add_request argument, indicating whether request returned results. return value df_list, placename latitude,longitude added column results without roundtrip API. json_list results contain request parameters returned API. normally include OpenCage API key, {opencage} masks key replaces OPENCAGE_KEY string output. add_request currently ignored OpenCage GeoJSON results.","code":""},{"path":"https://docs.ropensci.org/opencage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Possenriede. Author, maintainer. Jesse Sadler. Author. Maëlle Salmon. Author. Noam Ross. Contributor. Jake Russ. Contributor. Julia Silge. Reviewer.            Julia Silge reviewed {opencage} (v. 0.1.0) rOpenSci, see <https://github.com/ropensci/onboarding/issues/36>.","code":""},{"path":"https://docs.ropensci.org/opencage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Possenriede D, Sadler J, Salmon M (2024). opencage: Geocode OpenCage API. R package version 0.2.2.9000,  https://github.com/ropensci/opencage, https://docs.ropensci.org/opencage/.","code":"@Manual{,   title = {opencage: Geocode with the OpenCage API},   author = {Daniel Possenriede and Jesse Sadler and Maëlle Salmon},   year = {2024},   note = {R package version 0.2.2.9000,  https://github.com/ropensci/opencage},   url = {https://docs.ropensci.org/opencage/}, }"},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to opencage","title":"Contributing to opencage","text":"First , thanks considering contributing {opencage}! 👍 welcome bug reports pull requests expand improve functionality {opencage} contributors. document outlines propose change {opencage}.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to opencage","text":"Please note project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to opencage","text":"several ways can contribute project.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"share-the-love-️","dir":"","previous_headings":"How you can contribute","what":"Share the love ❤️","title":"Contributing to opencage","text":"Think {opencage} useful? Let others discover , telling person, via preferred social medium, blog post. Please also share use case discussion forum discuss.ropensci.org. Using {opencage} paper writing? Please consider citing . Get citation information {opencage} R citation(package = 'opencage').","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"ask-a-question-","dir":"","previous_headings":"How you can contribute","what":"Ask a question ❓","title":"Contributing to opencage","text":"Using {opencage} got stuck? Browse documentation see can find solution. Still stuck? Post question discussion forum tag package name. offer user support, ’ll try best address , questions often lead better documentation discovery bugs. Want ask question private? Email person listed maintainer DESCRIPTION file repo. Keep mind private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation ✍","title":"Contributing to opencage","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome! Small typos grammatical errors documentation can edited directly using GitHub web interface, long changes made source file. means edit roxygen comment .R file R/, .Rd files man/. edit README.Rmd file, README.md file package root directory. Since use non-standard workflow render vignettes package, edit *.Rmd.src files vignettes/ directory, *.Rmd files .","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"reporting-an-issue-","dir":"","previous_headings":"How you can contribute","what":"Reporting an issue 🐛","title":"Contributing to opencage","text":"Using our_package discovered bug? ’s annoying! Don’t let others experience open issue report GitHub can fix . Please illustrate bug minimal working example, also known reprex, .e. please provide detailed steps reproduce bug information might helpful troubleshooting. {reprex} 📦 can help .","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code 🛠","title":"Contributing to opencage","text":"Care fix bugs implement new functionality {opencage}? Awesome! 👏 make substantial change package, often preferable first discuss need scope change author(s) package issue report. follow following process: Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ropensci/opencage\"). See Pull Request Helper vignette details {usethis} can assist contributing code via pull requests (PR), . Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch issue want address. recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change; body PR contain “Fixes [#issue-number]”. Add bullet point top NEWS.md describing changes made followed GitHub username, links relevant issue(s)/PR(s). also consider following: Keep changes PR small succinct possible. importantly address one issue per PR. makes easier us review merge PR. mostly follow tidyverse style guide. can use {styler} package apply styles, please restyle code nothing PR. use {roxygen2}, Markdown syntax, documentation. prefer PR also included unit tests. Contributions test cases included easier accept unit tests ensure functionality just added break future. use {testthat} unit tests track test coverage covr Codecov. use {lintr} static code analysis. use GitHub Actions continuous integration. Workflows adapted r-lib/actions. Unfortunately tests requiring API key run PR, neither API key available prevent leaking.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"ropensci-discussion-forum-","dir":"","previous_headings":"","what":"rOpenSci discussion forum 👄","title":"Contributing to opencage","text":"Check discussion forum question, use case, otherwise bug feature request software . think issue requires longer discussion.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"license-","dir":"","previous_headings":"","what":"License 📜","title":"Contributing to opencage","text":"{opencage} licensed GPL-2 later.","code":""},{"path":"https://docs.ropensci.org/opencage/contributing.html","id":"thanks-for-contributing-","dir":"","previous_headings":"","what":"Thanks for contributing! 🙏","title":"Contributing to opencage","text":"detailed info contributing rOpenSci, please see rOpenSci Community Contributing Guide.","code":""},{"path":"https://docs.ropensci.org/opencage/index.html","id":"opencage","dir":"","previous_headings":"","what":"Geocode with the OpenCage API","title":"Geocode with the OpenCage API","text":"Geocode OpenCage API, either place name longitude latitude (forward geocoding) longitude latitude name address location (reverse geocoding).","code":""},{"path":"https://docs.ropensci.org/opencage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geocode with the OpenCage API","text":"can install {opencage} CRAN, R-universe GitHub like : Release version CRAN Development version R-universe Development version GitHub {pak} {remotes}","code":"install.packages(\"opencage\") install.packages(   \"opencage\",    repos = c(\"https://ropensci.r-universe.dev\", getOption(\"repos\")) ) pak::pak(\"ropensci/opencage\") remotes::install_github(\"ropensci/opencage\")"},{"path":"https://docs.ropensci.org/opencage/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Geocode with the OpenCage API","text":"best experience, recommend read “Introduction opencage” vignette (vignette(\"opencage\")), hurry: Register opencagedata.com/users/sign_up. Generate API key OpenCage dashboard. Save API key environment variable like OPENCAGE_KEY=yourkey .Renviron. See help(oc_config) alternative ways set OpenCage API key. Now ready turn place names latitude longitude coordinates: turn set coordinates name address location: remember, vignettes really great! : “Introduction opencage” vignette(\"opencage\") “Customise query” vignette(\"customise_query\") “Output options” vignette(\"output_options\")","code":"library(opencage) oc_forward_df(placename = \"Sarzeau\") oc_reverse_df(latitude = 51.5034070, longitude = -0.1275920)"},{"path":"https://docs.ropensci.org/opencage/index.html","id":"about-opencage","dir":"","previous_headings":"","what":"About OpenCage","title":"Geocode with the OpenCage API","text":"OpenCage API supports forward reverse geocoding. Sources OpenCage open geospatial data including OpenStreetMap, DataScienceToolkit, GeoPlanet, Natural Earth Data, libpostal, GeoNames, Flickr’s shapefiles plus whole lot besides. Refer current full list credits.","code":""},{"path":"https://docs.ropensci.org/opencage/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Geocode with the OpenCage API","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/opencage/pull_request_template.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"example included related issue mentioned documentation included tests included","code":""},{"path":"https://docs.ropensci.org/opencage/reference/countrycodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Country codes — countrycodes","title":"Country codes — countrycodes","text":"Country codes","code":""},{"path":"https://docs.ropensci.org/opencage/reference/countrycodes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country codes — countrycodes","text":"possible ISO 3166-1 Alpha 2 standard country codes.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/countrycodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Country codes — countrycodes","text":"","code":"data(\"countrycodes\")"},{"path":"https://docs.ropensci.org/opencage/reference/oc_api_ok.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the OpenCage API available? — oc_api_ok","title":"Is the OpenCage API available? — oc_api_ok","text":"Checks whether OpenCage API can reached.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_api_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the OpenCage API available? — oc_api_ok","text":"","code":"oc_api_ok(url = \"https://api.opencagedata.com\")"},{"path":"https://docs.ropensci.org/opencage/reference/oc_api_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the OpenCage API available? — oc_api_ok","text":"url URL OpenCage API, https://api.opencagedata.com.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_api_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the OpenCage API available? — oc_api_ok","text":"single logical value, TRUE FALSE.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"List of bounding boxes for OpenCage queries — oc_bbox","title":"List of bounding boxes for OpenCage queries — oc_bbox","text":"Create list bounding boxes OpenCage queries.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of bounding boxes for OpenCage queries — oc_bbox","text":"","code":"oc_bbox(...)  # S3 method for numeric oc_bbox(xmin, ymin, xmax, ymax, ...)  # S3 method for data.frame oc_bbox(data, xmin, ymin, xmax, ymax, ...)  # S3 method for bbox oc_bbox(bbox, ...)"},{"path":"https://docs.ropensci.org/opencage/reference/oc_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of bounding boxes for OpenCage queries — oc_bbox","text":"... Ignored. xmin Minimum longitude (also known min_lon, southwest_lng, west, left). ymin Minimum latitude (also known min_lat, southwest_lat, south, bottom). xmax Maximum longitude (also known max_lon, northeast_lng, east, right). ymax Maximum latitude (also known max_lat, northeast_lat, north, top). data data.frame containing least 4 columns xmin, ymin, xmax, ymax values, respectively. bbox bbox object, see sf::st_bbox.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of bounding boxes for OpenCage queries — oc_bbox","text":"list bounding boxes, class bbox.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of bounding boxes for OpenCage queries — oc_bbox","text":"","code":"oc_bbox(-5.63160, 51.280430, 0.278970, 51.683979) #> [[1]] #>     xmin     ymin     xmax     ymax  #> -5.63160 51.28043  0.27897 51.68398  #> attr(,\"crs\") #> $epsg #> [1] 4326 #>  #> $proj4string #> [1] \"+proj=longlat +datum=WGS84 +no_defs\" #>  #> attr(,\"class\") #> [1] \"crs\" #> attr(,\"class\") #> [1] \"bbox\" #>   xdf <-   data.frame(     place = c(\"Hamburg\", \"Hamburg\"),     northeast_lat = c(54.0276817, 42.7397729),     northeast_lng = c(10.3252805, -78.812825),     southwest_lat = c(53.3951118, 42.7091669),     southwest_lng = c(8.1053284, -78.860521)   ) oc_bbox(   xdf,   southwest_lng,   southwest_lat,   northeast_lng,   northeast_lat ) #> [[1]] #>      xmin      ymin      xmax      ymax  #>  8.105328 53.395112 10.325280 54.027682  #> attr(,\"crs\") #> $epsg #> [1] 4326 #>  #> $proj4string #> [1] \"+proj=longlat +datum=WGS84 +no_defs\" #>  #> attr(,\"class\") #> [1] \"crs\" #> attr(,\"class\") #> [1] \"bbox\" #>  #> [[2]] #>      xmin      ymin      xmax      ymax  #> -78.86052  42.70917 -78.81283  42.73977  #> attr(,\"crs\") #> $epsg #> [1] 4326 #>  #> $proj4string #> [1] \"+proj=longlat +datum=WGS84 +no_defs\" #>  #> attr(,\"class\") #> [1] \"crs\" #> attr(,\"class\") #> [1] \"bbox\" #>   # create bbox list column with dplyr library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union xdf %>%   mutate(     bbox =       oc_bbox(         southwest_lng,         southwest_lat,         northeast_lng,         northeast_lat       )   ) #>     place northeast_lat northeast_lng southwest_lat southwest_lng #> 1 Hamburg      54.02768      10.32528      53.39511      8.105328 #> 2 Hamburg      42.73977     -78.81283      42.70917    -78.860521 #>                                        bbox #> 1 8.105328, 53.395112, 10.325280, 54.027682 #> 2  -78.86052, 42.70917, -78.81283, 42.73977  # create bbox list from a simple features bbox if (requireNamespace(\"sf\", quietly = TRUE)) {   library(sf)   bbox <- st_bbox(c(xmin = 16.1, xmax = 16.6, ymax = 48.6, ymin = 47.9),     crs = 4326   )   oc_bbox(bbox) } #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> [[1]] #> xmin ymin xmax ymax  #> 16.1 47.9 16.6 48.6  #>"},{"path":"https://docs.ropensci.org/opencage/reference/oc_clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear the opencage cache — oc_clear_cache","title":"Clear the opencage cache — oc_clear_cache","text":"Forget past results reset opencage cache.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear the opencage cache — oc_clear_cache","text":"","code":"oc_clear_cache()"},{"path":"https://docs.ropensci.org/opencage/reference/oc_clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear the opencage cache — oc_clear_cache","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  system.time(oc_reverse(latitude = 10, longitude = 10)) system.time(oc_reverse(latitude = 10, longitude = 10)) oc_clear_cache() system.time(oc_reverse(latitude = 10, longitude = 10)) }"},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure settings — oc_config","title":"Configure settings — oc_config","text":"Configure session settings opencage.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure settings — oc_config","text":"","code":"oc_config(   key = Sys.getenv(\"OPENCAGE_KEY\"),   rate_sec = getOption(\"oc_rate_sec\", default = 1L),   no_record = getOption(\"oc_no_record\", default = TRUE),   show_key = getOption(\"oc_show_key\", default = FALSE),   ... )"},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure settings — oc_config","text":"key OpenCage API key character vector length one. pass key directly parameter, though. See details. rate_sec Numeric vector length one. Sets maximum number requests sent OpenCage API per second. Defaults value set oc_rate_sec option, , case exist, 1L. no_record Logical vector length one. TRUE, OpenCage create log entries queries cache geocoding requests. Defaults value set oc_no_record option, , case exist, TRUE. show_key Logical vector length one. relevant debugging oc_forward() oc_reverse() calls return = \"url_only\" argument. TRUE, result show OpenCage API key URL stored OPENCAGE_KEY environment variable. TRUE, API key replaced string OPENCAGE_KEY. show_key defaults value set oc_show_key option, , case exist, FALSE. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":"set-your-opencage-api-key","dir":"Reference","previous_headings":"","what":"Set your OpenCage API key","title":"Configure settings — oc_config","text":"opencage conveniently retrieve API key saved environment variable \"OPENCAGE_KEY\". oc_config() help set environment variable. pass key directly parameter function, though, risk exposing via script history. three safer ways set API key instead: Save API key environment variable .Renviron described Forgot Teach R Efficient R Programming. fetched functions call OpenCage API. even call oc_config() set key; can start geocoding right away. usethis package installed, can edit .Renviron usethis::edit_r_environ(). strongly recommend storing API key user-level .Renviron, opposed project-level. makes less likely share sensitive information mistake. use package like keyring store credentials, can safely pass key script function call like oc_config(key = keyring::key_get(\"opencage\")). call oc_config() base::interactive() session OPENCAGE_KEY environment variable set, prompt enter key console.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":"set-your-opencage-api-rate-limit","dir":"Reference","previous_headings":"","what":"Set your OpenCage API rate limit","title":"Configure settings — oc_config","text":"rate limit allowed API depends OpenCage plan purchased ranges 1 request/sec \"Free Trial\" plan 15 requests/sec \"Medium\" \"Large\" plans, see https://opencagedata.com/pricing details --date information. can set rate limit persistently across sessions setting oc_rate_sec option .Rprofile. usethis package installed, can edit .Rprofile usethis::edit_r_profile().","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_config.html","id":"prevent-query-logging-and-caching","dir":"Reference","previous_headings":"","what":"Prevent query logging and caching","title":"Configure settings — oc_config","text":"default, OpenCage store queries server logs cache forward geocoding requests side. order speed response times able debug errors improve service. Logs automatically deleted six months according OpenCage's page data protection GDPR. set no_record TRUE, query contents logged cached. OpenCage still records made request, specific query made. oc_config(no_record = TRUE) sets oc_no_record option active R session, used subsequent OpenCage queries. can set oc_no_record option persistently across sessions .Rprofile. increased privacy opencage sets no_record TRUE, default. Please note, however, opencage always caches data receives OpenCage API locally, long R session alive. information OpenCage's policies privacy data protection see FAQs, GDPR page, , no_record parameter, see relevant blog post.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward geocoding — oc_forward","title":"Forward geocoding — oc_forward","text":"Forward geocoding character vector location names latitude longitude tuples.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward geocoding — oc_forward","text":"","code":"oc_forward(   placename,   return = c(\"df_list\", \"json_list\", \"geojson_list\", \"url_only\"),   bounds = NULL,   proximity = NULL,   countrycode = NULL,   language = NULL,   limit = 10L,   min_confidence = NULL,   no_annotations = TRUE,   roadinfo = FALSE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   add_request = FALSE,   ... )"},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward geocoding — oc_forward","text":"placename character vector location names addresses geocoded. locations addresses, see OpenCage's instructions format addresses best forward geocoding results. return character vector length one indicating return value function, either list tibbles (df_list, default), JSON list (json_list), GeoJSON list (geojson_list), URL API called (url_only). bounds list bounding boxes length one length(placename). Bounding boxes named numeric vectors, four coordinates forming south-west north-east corners bounding box: list(c(xmin, ymin, xmax, ymax)). bounds restricts possible results supplied region. can specified oc_bbox() helper. example: bounds = oc_bbox(-0.563160, 51.280430, 0.278970, 51.683979). Default NULL. proximity list points length one length(placename). point named numeric vector latitude, longitude coordinate pair decimal format. proximity provides OpenCage hint bias results favour closer specified location. can specified oc_points() helper. example: proximity = oc_points(51.9526, 7.6324). Default NULL. countrycode two letter code defined ISO 3166-1 Alpha 2 standard restricts results given country countries. E.g. \"AR\" Argentina, \"FR\" France, \"NZ\" New Zealand. Multiple countrycodes per placename must wrapped list. Default NULL. language IETF BCP 47 language tag (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. limit Numeric vector integer values determine maximum number results returned placename. Integer values 1 100 allowed. Default 10. min_confidence Numeric vector integer values 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL. no_annotations Logical vector indicating whether additional information result location returned. TRUE default, means results contain annotations. roadinfo Logical vector indicating whether geocoder attempt match nearest road (rather address) provide additional road driving information. Default FALSE. no_dedupe Logical vector (default FALSE), TRUE results deduplicated. abbrv Logical vector (default FALSE), TRUE addresses formatted field results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). address_only Logical vector (default FALSE), TRUE address details returned formatted field results, name point--interest one address. add_request Logical vector (default FALSE) indicating whether request returned results. return value df_list, query text added column results. json_list results contain request parameters, including API key used! currently ignored OpenCage return value geojson_list. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward geocoding — oc_forward","text":"Depending return argument, oc_forward returns list either results tibbles (\"df_list\", default), results JSON specified list (\"json_list\"), results GeoJSON specified list (\"geojson_list\"), URL OpenCage API call debugging purposes (\"url_only\"). results returned (list ) tibbles, column names coming OpenCage API prefixed \"oc_\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward geocoding — oc_forward","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  # Geocode a single location, an address in this case oc_forward(placename = \"Triererstr 15, 99432, Weimar, Deutschland\")  # Geocode multiple locations locations <- c(\"Nantes\", \"Hamburg\", \"Los Angeles\") oc_forward(placename = locations)  # Use bounding box to help return accurate results # for each placename bounds <- oc_bbox(   xmin = c(-2, 9, -119),   ymin = c(47, 53, 34),   xmax = c(0, 10, -117),   ymax = c(48, 54, 35) ) oc_forward(placename = locations, bounds = bounds)  # Another way to help specify the desired results # is with country codes. oc_forward(   placename = locations,   countrycode = c(\"ca\", \"us\", \"co\") )  # With multiple countrycodes per placename oc_forward(   placename = locations,   countrycode = list(c(\"fr\", \"ca\"), c(\"de\", \"us\"), c(\"us\", \"co\")) )  # Return results in a preferred language if possible oc_forward(   placename = c(\"Brugge\", \"Mechelen\", \"Antwerp\"),   language = \"fr\" )  # Limit the number of results per placename and return json_list oc_forward(   placename = locations,   bounds = bounds,   limit = 1,   return = \"json_list\" ) }"},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward geocoding with data frames — oc_forward_df","title":"Forward geocoding with data frames — oc_forward_df","text":"Forward geocoding column vector location names latitude longitude tuples.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward geocoding with data frames — oc_forward_df","text":"","code":"oc_forward_df(...)  # S3 method for data.frame oc_forward_df(   data,   placename,   bind_cols = TRUE,   output = c(\"short\", \"all\"),   bounds = NULL,   proximity = NULL,   countrycode = NULL,   language = NULL,   limit = 1L,   min_confidence = NULL,   no_annotations = TRUE,   roadinfo = FALSE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   ... )  # S3 method for character oc_forward_df(   placename,   output = c(\"short\", \"all\"),   bounds = NULL,   proximity = NULL,   countrycode = NULL,   language = NULL,   limit = 1L,   min_confidence = NULL,   no_annotations = TRUE,   roadinfo = FALSE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   ... )"},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward geocoding with data frames — oc_forward_df","text":"... Ignored. data data frame. placename unquoted variable name character column vector location names addresses geocoded. locations addresses, see OpenCage's instructions format addresses best forward geocoding results. bind_cols bind_col = TRUE, default, results column bound data. FALSE, results returned new tibble. output character vector length one indicating whether latitude, longitude, formatted address variables (\"short\", default), variables (\"\") variables returned. bounds list length one, unquoted variable name list column bounding boxes. Bounding boxes named numeric vectors, 4 coordinates forming south-west north-east corners bounding box: list(c(xmin, ymin, xmax, ymax)). bounds restricts possible results supplied region. can specified oc_bbox() helper. example: bounds = oc_bbox(-0.563160, 51.280430, 0.278970, 51.683979). Default NULL. proximity list length one, unquoted variable name list column points. Points named numeric vectors latitude, longitude coordinate pairs decimal format. proximity provides OpenCage hint bias results favour closer specified location. can specified oc_points() helper. example: proximity = oc_points(41.40139, 2.12870). Default NULL. countrycode Character vector, unquoted variable name vector, two-letter codes defined ISO 3166-1 Alpha 2 standard restricts results given country countries. E.g. \"AR\" Argentina, \"FR\" France, \"NZ\" New Zealand. Multiple countrycodes per placename must wrapped list. Default NULL. language Character vector, unquoted variable name vector, IETF BCP 47 language tags (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. limit Numeric vector integer values, unquoted variable name vector, determine maximum number results returned placename. Integer values 1 100 allowed. Default 1. min_confidence Numeric vector integer values, unquoted variable name vector, 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL). no_annotations Logical vector, unquoted variable name vector, indicating whether additional information result location returned. TRUE default, means results contain annotations. roadinfo Logical vector, unquoted variable name vector, indicating whether geocoder attempt match nearest road (rather address) provide additional road driving information. Default FALSE. no_dedupe Logical vector, unquoted variable name vector. Default FALSE. TRUE results deduplicated. abbrv Logical vector, unquoted variable name vector. Default FALSE. TRUE addresses oc_formatted variable results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). address_only Logical vector, unquoted variable name vector. Default FALSE. TRUE address details returned oc_formatted variable results, name point--interest one address.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward geocoding with data frames — oc_forward_df","text":"tibble. Column names coming OpenCage API prefixed \"oc_\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opencage/reference/oc_forward_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward geocoding with data frames — oc_forward_df","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  library(tibble) df <- tibble(   id = 1:3,   locations = c(\"Nantes\", \"Hamburg\", \"Los Angeles\") )  # Return lat, lng, and formatted address oc_forward_df(df, placename = locations)  # Return more detailed information about the locations oc_forward_df(df, placename = locations, output = \"all\")  # Do not column bind results to input data frame oc_forward_df(df, placename = locations, bind_cols = FALSE)  # Add more results by changing the limit from the default of 1. oc_forward_df(df, placename = locations, limit = 5)  # Restrict results to a given bounding box oc_forward_df(df,   placename = locations,   bounds = oc_bbox(-5, 45, 15, 55) )  # oc_forward_df accepts unquoted column names for all # arguments except bind_cols and output. # This makes it possible to build up more detailed queries # through the data frame passed to the data argument.  df2 <- add_column(df,   bounds = oc_bbox(     xmin = c(-2, 9, -119),     ymin = c(47, 53, 34),     xmax = c(0, 10, -117),     ymax = c(48, 54, 35)   ),   limit = 1:3,   countrycode = c(\"ca\", \"us\", \"co\"),   language = c(\"fr\", \"de\", \"en\") )  # Use the bounds column to help return accurate results and # language column to specify preferred language of results oc_forward_df(df2,   placename = locations,   bounds = bounds,   language = language )  # Different limit of results for each placename oc_forward_df(df2,   placename = locations,   limit = limit )  # Specify the desired results by the countrycode column oc_forward_df(df2,   placename = locations,   countrycode = countrycode ) }"},{"path":"https://docs.ropensci.org/opencage/reference/oc_key_present.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an OpenCage API key present? — oc_key_present","title":"Is an OpenCage API key present? — oc_key_present","text":"Checks whether potential OpenCage API key, .e. 32 character long, alphanumeric string, stored environment variable OPENCAGE_KEY.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_key_present.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an OpenCage API key present? — oc_key_present","text":"","code":"oc_key_present()"},{"path":"https://docs.ropensci.org/opencage/reference/oc_key_present.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an OpenCage API key present? — oc_key_present","text":"single logical value, TRUE FALSE.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_points.html","id":null,"dir":"Reference","previous_headings":"","what":"List of points for OpenCage queries — oc_points","title":"List of points for OpenCage queries — oc_points","text":"Create list points (latitude/longitude coordinate pairs) OpenCage queries.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of points for OpenCage queries — oc_points","text":"","code":"oc_points(...)  # S3 method for numeric oc_points(latitude, longitude, ...)  # S3 method for data.frame oc_points(data, latitude, longitude, ...)"},{"path":"https://docs.ropensci.org/opencage/reference/oc_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of points for OpenCage queries — oc_points","text":"... Ignored. latitude, longitude Numeric vectors latitude longitude values. data data.frame containing least 2 columns latitude longitude values.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of points for OpenCage queries — oc_points","text":"list points. point named vector length 2 containing latitude/longitude coordinate pair.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of points for OpenCage queries — oc_points","text":"","code":"oc_points(-21.01404, 55.26077) #> [[1]] #>  latitude longitude  #> -21.01404  55.26077  #>   xdf <-   data.frame(     place = c(\"Hamburg\", \"Los Angeles\"),     lat = c(53.5503, 34.0536),     lon = c(10.0006, -118.2427)   ) oc_points(   data = xdf,   latitude = lat,   longitude = lon ) #> [[1]] #>  latitude longitude  #>   53.5503   10.0006  #>  #> [[2]] #>  latitude longitude  #>   34.0536 -118.2427  #>   # create a list column with points with dplyr library(dplyr) xdf %>%   mutate(     points =       oc_points(         lat,         lon       )   ) #>         place     lat       lon             points #> 1     Hamburg 53.5503   10.0006   53.5503, 10.0006 #> 2 Los Angeles 34.0536 -118.2427 34.0536, -118.2427"},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocoding — oc_reverse","title":"Reverse geocoding — oc_reverse","text":"Reverse geocoding numeric vectors latitude longitude pairs names addresses location.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocoding — oc_reverse","text":"","code":"oc_reverse(   latitude,   longitude,   return = c(\"df_list\", \"json_list\", \"geojson_list\", \"url_only\"),   language = NULL,   min_confidence = NULL,   no_annotations = TRUE,   roadinfo = FALSE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   add_request = FALSE,   ... )"},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocoding — oc_reverse","text":"latitude, longitude Numeric vectors latitude longitude values. return character vector length one indicating return value function, either list tibbles (df_list, default), JSON list (json_list), GeoJSON list (geojson_list), URL API called (url_only). language IETF BCP 47 language tag (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. min_confidence Numeric vector integer values 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL. no_annotations Logical vector indicating whether additional information result location returned. TRUE default, means results contain annotations. roadinfo Logical vector indicating whether geocoder attempt match nearest road (rather address) provide additional road driving information. Default FALSE. no_dedupe Logical vector (default FALSE), TRUE results deduplicated. abbrv Logical vector (default FALSE), TRUE addresses formatted field results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). address_only Logical vector (default FALSE), TRUE address details returned formatted field results, name point--interest one address. add_request Logical vector (default FALSE) indicating whether request returned results. return value df_list, query text added column results. json_list results contain request parameters, including API key used! currently ignored OpenCage return value geojson_list. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocoding — oc_reverse","text":"Depending return argument, oc_reverse returns list either results tibbles (\"df_list\", default), results JSON specified list (\"json_list\"), results GeoJSON specified list (\"geojson_list\"), URL OpenCage API call debugging purposes (\"url_only\"). results returned (list ) tibbles, column names coming OpenCage API prefixed \"oc_\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse geocoding — oc_reverse","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  # Reverse geocode a single location oc_reverse(latitude = -36.85007, longitude = 174.7706)  # Reverse geocode multiple locations lat <- c(47.21864, 53.55034, 34.05369) lng <- c(-1.554136, 10.000654, -118.242767)  oc_reverse(latitude = lat, longitude = lng)  # Return results in a preferred language if possible oc_reverse(   latitude = lat, longitude = lng,   language = \"fr\" )  # Return results as a json list oc_reverse(   latitude = lat, longitude = lng,   return = \"json_list\" ) }"},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocoding with data frames — oc_reverse_df","title":"Reverse geocoding with data frames — oc_reverse_df","text":"Reverse geocoding latitude longitude pairs names addresses location.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocoding with data frames — oc_reverse_df","text":"","code":"oc_reverse_df(...)  # S3 method for data.frame oc_reverse_df(   data,   latitude,   longitude,   bind_cols = TRUE,   output = c(\"short\", \"all\"),   language = NULL,   min_confidence = NULL,   roadinfo = FALSE,   no_annotations = TRUE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   ... )  # S3 method for numeric oc_reverse_df(   latitude,   longitude,   output = c(\"short\", \"all\"),   language = NULL,   min_confidence = NULL,   no_annotations = TRUE,   no_dedupe = FALSE,   abbrv = FALSE,   address_only = FALSE,   ... )"},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocoding with data frames — oc_reverse_df","text":"... Ignored. data data frame. latitude, longitude Unquoted variable names numeric columns vectors latitude longitude values. bind_cols bind_col = TRUE, default, results column bound data. FALSE, results returned new tibble. output character vector length one indicating whether formatted address (\"short\", default) variables (\"\") variables returned. language Character vector, unquoted variable name vector, IETF BCP 47 language tags (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. min_confidence Numeric vector integer values, unquoted variable name vector, 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL). roadinfo Logical vector, unquoted variable name vector, indicating whether geocoder attempt match nearest road (rather address) provide additional road driving information. Default FALSE. no_annotations Logical vector, unquoted variable name vector, indicating whether additional information result location returned. TRUE default, means results contain annotations. no_dedupe Logical vector, unquoted variable name vector. Default FALSE. TRUE results deduplicated. abbrv Logical vector, unquoted variable name vector. Default FALSE. TRUE addresses oc_formatted variable results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). address_only Logical vector, unquoted variable name vector. Default FALSE. TRUE address details returned oc_formatted variable results, name point--interest one address.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocoding with data frames — oc_reverse_df","text":"tibble. Column names coming OpenCage API prefixed \"oc_\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opencage/reference/oc_reverse_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse geocoding with data frames — oc_reverse_df","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  library(tibble) df <- tibble(   id = 1:4,   lat = c(-36.85007, 47.21864, 53.55034, 34.05369),   lng = c(174.7706, -1.554136, 10.000654, -118.242767) )  # Return formatted address of lat/lng values oc_reverse_df(df, latitude = lat, longitude = lng)  # Return more detailed information about the locations oc_reverse_df(df,   latitude = lat, longitude = lng,   output = \"all\" )  # Return results in a preferred language if possible oc_reverse_df(df,   latitude = lat, longitude = lng,   language = \"fr\" )  # oc_reverse_df accepts unquoted column names for all # arguments except bind_cols and output. # This makes it possible to build up more detailed queries # through the data frame passed to the data argument.  df2 <- add_column(df,   language = c(\"en\", \"fr\", \"de\", \"en\"),   confidence = c(8, 10, 10, 10) )  # Use language column to specify preferred language of results # and confidence column to allow different confidence levels oc_reverse_df(df2,   latitude = lat, longitude = lng,   language = language,   min_confidence = confidence ) }"},{"path":"https://docs.ropensci.org/opencage/reference/opencage-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in opencage — opencage-deprecated","title":"Deprecated functions in opencage — opencage-deprecated","text":"functions still work removed (defunct) next version.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated functions in opencage — opencage-deprecated","text":"opencage_forward() opencage_reverse() opencage_key()","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage-package.html","id":null,"dir":"Reference","previous_headings":"","what":"opencage: Geocode with the OpenCage API — opencage-package","title":"opencage: Geocode with the OpenCage API — opencage-package","text":"Geocode OpenCage API, either place name longitude latitude (forward geocoding) longitude latitude name address location (reverse geocoding), see https://opencagedata.com.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opencage/reference/opencage-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"opencage: Geocode with the OpenCage API — opencage-package","text":"Maintainer: Daniel Possenriede possenriede+r@gmail.com (ORCID) Authors: Jesse Sadler (ORCID) Maëlle Salmon (ORCID) contributors: Noam Ross [contributor] Jake Russ [contributor] Julia Silge (Julia Silge reviewed opencage (v. 0.1.0) rOpenSci, see <https://github.com/ropensci/onboarding/issues/36>.) [reviewer]","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward geocoding — opencage_forward","title":"Forward geocoding — opencage_forward","text":"Deprecated: use oc_forward oc_forward_df forward geocoding.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward geocoding — opencage_forward","text":"","code":"opencage_forward(   placename,   key = opencage_key(),   bounds = NULL,   countrycode = NULL,   language = NULL,   limit = 10L,   min_confidence = NULL,   no_annotations = FALSE,   no_dedupe = FALSE,   no_record = FALSE,   abbrv = FALSE,   add_request = TRUE )"},{"path":"https://docs.ropensci.org/opencage/reference/opencage_forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward geocoding — opencage_forward","text":"placename character vector location names addresses geocoded. locations addresses, see OpenCage's instructions format addresses best forward geocoding results. key OpenCage API key character vector length one. default, opencage_key() attempt retrieve key environment variable OPENCAGE_KEY. bounds list bounding boxes length one length(placename). Bounding boxes named numeric vectors, four coordinates forming south-west north-east corners bounding box: list(c(xmin, ymin, xmax, ymax)). bounds restricts possible results supplied region. can specified oc_bbox() helper. example: bounds = oc_bbox(-0.563160, 51.280430, 0.278970, 51.683979). Default NULL. countrycode two letter code defined ISO 3166-1 Alpha 2 standard restricts results given country countries. E.g. \"AR\" Argentina, \"FR\" France, \"NZ\" New Zealand. Multiple countrycodes per placename must wrapped list. Default NULL. language IETF BCP 47 language tag (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. limit Numeric vector integer values determine maximum number results returned placename. Integer values 1 100 allowed. Default 10. min_confidence Numeric vector integer values 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL. no_annotations Logical vector indicating whether additional information result location returned. TRUE default, means results contain annotations. no_dedupe Logical vector (default FALSE), TRUE results deduplicated. no_record Logical vector length one (default FALSE), TRUE log entry query created, geocoding request cached OpenCage. abbrv Logical vector (default FALSE), TRUE addresses formatted field results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). add_request Logical vector (default FALSE) indicating whether request returned results. return value df_list, query text added column results. json_list results contain request parameters, including API key used! currently ignored OpenCage return value geojson_list.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_forward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward geocoding — opencage_forward","text":"list results tibble one line per result, number results integer, timestamp POSIXct object, rate_info tibble/data.frame maximal number API calls  per day used key, number remaining calls day time number remaining calls reset.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_forward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward geocoding — opencage_forward","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok() opencage_forward(placename = \"Sarzeau\") opencage_forward(placename = \"Islington, London\") opencage_forward(placename = \"Triererstr 15,                               Weimar 99423,                               Deutschland\") }"},{"path":"https://docs.ropensci.org/opencage/reference/opencage_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Opencage API key — opencage_key","title":"Retrieve Opencage API key — opencage_key","text":"Deprecated removed package together opencage_forward() opencage_reverse(). Retrieves OpenCage API Key environment variable OPENCAGE_KEY.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Opencage API key — opencage_key","text":"","code":"opencage_key(quiet = TRUE)"},{"path":"https://docs.ropensci.org/opencage/reference/opencage_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Opencage API key — opencage_key","text":"quiet Logical vector length one indicating whether key returned quietly whether message printed.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocoding — opencage_reverse","title":"Reverse geocoding — opencage_reverse","text":"Deprecated: use oc_reverse oc_reverse_df reverse geocoding.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocoding — opencage_reverse","text":"","code":"opencage_reverse(   latitude,   longitude,   key = opencage_key(),   bounds = NULL,   countrycode = NULL,   language = NULL,   limit = 10,   min_confidence = NULL,   no_annotations = FALSE,   no_dedupe = FALSE,   no_record = FALSE,   abbrv = FALSE,   add_request = TRUE )"},{"path":"https://docs.ropensci.org/opencage/reference/opencage_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocoding — opencage_reverse","text":"latitude, longitude Numeric vectors latitude longitude values. key OpenCage API key character vector length one. default, opencage_key() attempt retrieve key environment variable OPENCAGE_KEY. bounds Bounding box, ignored reverse geocoding. countrycode Country code, ignored reverse geocoding. language IETF BCP 47 language tag (\"es\" Spanish \"pt-BR\" Brazilian Portuguese). OpenCage attempt return results language. Alternatively can specify \"native\" tag, case OpenCage attempt return response \"official\" language(s). case language parameter set NULL (default), tag recognized, OpenCage record language, results returned English. limit many results returned (1-100), ignored reverse geocoding. min_confidence Numeric vector integer values 0 10 indicating precision returned result defined geographical extent, (.e. extent result's bounding box). See API documentation details. results least requested confidence returned. Default NULL. no_annotations Logical vector indicating whether additional information result location returned. TRUE default, means results contain annotations. no_dedupe Logical vector (default FALSE), TRUE results deduplicated. no_record Logical vector length one (default FALSE), TRUE log entry query created, geocoding request cached OpenCage. abbrv Logical vector (default FALSE), TRUE addresses formatted field results abbreviated (e.g. \"Main St.\" instead \"Main Street\"). add_request Logical vector (default FALSE) indicating whether request returned results. return value df_list, query text added column results. json_list results contain request parameters, including API key used! currently ignored OpenCage return value geojson_list.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocoding — opencage_reverse","text":"list results tibble one line per result, number results integer, timestamp POSIXct object, rate_info tibble/data.frame maximal number API calls  per day used key, number remaining calls day time number remaining calls reset.","code":""},{"path":"https://docs.ropensci.org/opencage/reference/opencage_reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse geocoding — opencage_reverse","text":"","code":"if (FALSE) { # oc_key_present() && oc_api_ok()  opencage_reverse(   latitude = 0, longitude = 0,   limit = 2 ) }"},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-development-version","dir":"Changelog","previous_headings":"","what":"opencage (development version)","title":"opencage (development version)","text":"opencage now supports address_only parameter, see “New optional API parameter ‘address_only’”, (#151). geocoding functions send query API anymore API key present (#133). NAs allowed placename latitude/longitude arguments (also empty strings placename). queries sent API. empty/NA response returned depending specific query (#143). opencage_forward(), opencage_reverse(), opencage_key() now deprecated (leveling soft-deprecated, #147).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"internals-development-version","dir":"Changelog","previous_headings":"","what":"Internals","title":"opencage (development version)","text":"{opencage} now uses {testthat} 3e unit tests (#141). GitHub action workflows updated (#142, #149, #152). Styler document workflows added (#153). Use {lintr} version 3.0 add “package development” linters (#144). countrycodes source script moved data-raw (#146). Add CITATION.cff corresponding GitHub action (#148). Select expressions inside oc_forward_df() oc_reverse_df() now use \"column\" instead .data$column, latter deprecated tidyselect v1.2.0 (#150). opencage code now uses consistent style (styler::tidyverse_style()) internal functions documented (#153).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-022","dir":"Changelog","previous_headings":"","what":"opencage 0.2.2","title":"opencage 0.2.2","text":"CRAN release: 2021-02-20 Fixed test caused error CRAN’s Solaris (#131).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-021","dir":"Changelog","previous_headings":"","what":"opencage 0.2.1","title":"opencage 0.2.1","text":"CRAN release: 2021-02-14 major rewrite {opencage} package. opencage_forward() opencage_reverse() deprecated superseded oc_forward() oc_reverse(), respectively. addition two new functions oc_forward_df() oc_reverse_df(), geocode place names addresses geographic coordinates (latitude longitude) vice versa, return data frame. new features include: oc_forward() oc_reverse() return either lists data frames, JSON strings, GeoJSON strings, URLs sent API (latter debugging purposes). oc_forward_df() oc_reverse_df() take data frame vectors input return data frame geocoding results, optionally source data frame bound results data frame. Almost arguments geocoding functions vectorised (exceptions output), possible serially (reverse) geocode lists locations coordinates. geocoding functions show progress indicator one placename latitude/longitude pair provided. forward geocoding functions now support multiple countrycodes accordance OpenCage API (#44). countrycodes can now provided upper lower case (#47). helper function oc_bbox() now makes easier create list bounding boxes numeric vectors, bbox objects data frames. oc_forward() oc_forward_df() now support OpenCage’s proximity parameter. results geocoding request biased towards location (#60). helper function oc_points() now makes easier create list point coordinates numeric vectors data frames pass proximity argument example. geocoding functions now support OpenCage’s roadinfo parameter (#65). set TRUE, OpenCage attempts match nearest road (rather address) provides additional road driving information. Language tags passed language argument validated anymore, since language tags used OpenStreetMap hence OpenCage always conform IETF BCP 47 standard (#90). languagecodes, stored {opencage} external data, therefore omitted package. addition, now possible specify language = \"native\", OpenCage attempt return results “official” language country. http requests now handled {crul}, {httr} (#37). API calls now rate limited (#32). default limit set 1 call per second per API limit Free Trial plan. {opencage} settings like OpenCage API key API rate limit can configured oc_config(). want OpenCage record contents queries, can also set no_record parameter active R session oc_config() (opposed providing parameter function call). oc_config() settings can set permanently via options() environment variables, see help(oc_config).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"breaking-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"opencage 0.2.1","text":"opencage_forward(), opencage_reverse(), opencage_key() soft-deprecated. opencage_forward() opencage_reverse() always output strings characters, .e. won’t coerce factor depending stringsAsFactor option. opencage_key() returns OpenCage API key invisibly. NA values allowed anymore placename latitude/longitude arguments, OpenCage throws HTTP 400 ‘bad query’ error query empty (#98).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"minor-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"opencage 0.2.1","text":"column name countrycodes now code, Code. HTTP error messages now returned directly API therefore always --date. previously used responses code_message, stored {opencage} external data, deleted. information OpenCage’s HTTP status codes see https://opencagedata.com/api#codes. Fixed two URLs, one rejected v0.2.0 submission.","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-014","dir":"Changelog","previous_headings":"","what":"opencage 0.1.4","title":"opencage 0.1.4","text":"CRAN release: 2018-01-16 Bug fix: now countrycode argument can used Namibia (#24, #25).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-013","dir":"Changelog","previous_headings":"","what":"opencage 0.1.3","title":"opencage 0.1.3","text":"Added add_request parameter (appending original query results).","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-012","dir":"Changelog","previous_headings":"","what":"opencage 0.1.2","title":"opencage 0.1.2","text":"CRAN release: 2017-05-12 Added abbrv parameter, see https://blog.opencagedata.com/post/160294347883/shrtr-pls.","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-011","dir":"Changelog","previous_headings":"","what":"opencage 0.1.1","title":"opencage 0.1.1","text":"Added no_record parameter, see https://blog.opencagedata.com/post/145602604628/-privacy--norecord-parameter","code":""},{"path":"https://docs.ropensci.org/opencage/news/index.html","id":"opencage-010","dir":"Changelog","previous_headings":"","what":"opencage 0.1.0","title":"opencage 0.1.0","text":"CRAN release: 2016-05-12 Added NEWS.md file track changes package.","code":""}]
